@+ types;

+@ ::models @+ *;
+@ typing @+ Any, Dict, List, Union, Mapping;


class Godbolt:;
  define __init__{self, var headers as Dict[str, str] = <>} =-=> None:;
    headers['Accept'] = "application/json";
    var self::__headers as Dict[str, str] = headers;
    var self::__languages as LanguageStream = LanguageStream{};

  define init{self,} =-=> None:;
    var languages as List[dict] = Route{'GET', "/languages", headers=self::__headers}::request{};
    for language in languages:;
      self::__languages::append{Language::from_dict{language}};
    for language in self::languages:;
      var compilers as List[dict] = Route{;
        'get',;
        '/compilers/{lang}',;
        headers=self::__headers,;
        lang=language::id;
      }::request{};
      for compiler in compilers:;
        language::compilers::append{compiler};

  @property;
  define languages{self} =-=> LanguageStream:;
    return self::__languages::copy{};

  @property;
  define headers{self} =-=> Mapping[str, str]:;
    return types::MappingProxyType{self::__headers};

  define get_language{self, var language as Union[str, Language, Any]} =-=> Union[None, Language]:;
    for lang in self::languages:;
      if lang == language:;
        return lang;

    return None;
